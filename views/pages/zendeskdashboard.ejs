<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskRouter OmniChannel Contact Center</title>
  <link href='https://fonts.googleapis.com/css?family=Raleway:400,300,500' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="css/foundationz.css" />
  <link href="fonts/foundation-icons/foundation-icons.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" type="text/css" href="css/normalize.css" />
  <!--<link rel="stylesheet" type="text/css" href="fonts/foundation-icons">-->
  <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" />
  <link href="css/stylez.css" rel="stylesheet" />
  <script src="js/modernizr.custom.js"></script>
</head>
<body class="fadeIn animated">
  <div class="container">
    <div class="content-body">

      <div id="dashboard-body">
        <div class="row" id="addToThis"> 
          <div id="agentui">
            <agentui ref="agentui"></agentui>
          </div>       
        </div>
      </div>
    </div>
  </div>

  <template id="Task" >
    <div>
      <div class='small-12 columns' v-for="task in taskList">
        <div class='custom-panel-heading'>
          <h5 class='white'>
            <div id='titleText'>
            
              <img v-bind:src="task.data.profile_pic" height="50" width="50" align="right">
              
              Task: {{task.data.name}} 
              <br />
              Address: {{task.data.address}}
              <br />
              Status: {{task.data.status}}
              <br />
              Intent: {{task.data.attributes.bot_intent}}
            </div>
            <template v-if="task.data.status === 'reserved'">
              <span class='label radius alert right'>Reject</span>&nbsp;
              <a href='#' @click="accept(task.data.sid, task.data.reservationSid, task.data.channel)">
                <span class='label radius success right'>Accept</span>
              </a>
            </template>
            <template v-if="task.data.status === 'assigned' || task.data.status ==='wrapping'">
            <a href='#' @Click="completeTask(task.data.sid)"><span class='label radius success right'>Complete</span></a>
            </template>
          </h5>
        </div>
        <div class='custom-panel-details'>
        <template v-if="task.data.channel ==='chat'">
          <template v-for="message in fetchMessagesForTask(task.data.sid)">
            <div class='row'>
              <div class='message-dashboard'>
                <div class='small-2 columns'>
                  <div class='profilePic'>
                    <img v-bind:src="task.data.profile_pic" alt='profile' />
                  </div>
                </div> 
                <div class='small-10 columns'>
                  <div class='message-desc'>
                    <div class='messageName'>
                      <b>{{message.from}}</b>
                    </div>
                    {{message.message}}
                    <span class='right green'>now</span>
                  </div>
                </div>
              </div>
            </div>
        </template>
        <template v-if="task.data.accepted==='true'">
          <form><input type='text' v-model="messageText" @keyup.enter="sendMessage(task.data.attributes.message_to, task.data.attributes.message_from, task.data.sid, messageText); return false;" placeholder='Reply...'><a href='#' class='button success radius' @click="sendMessage(task.data.attributes.message_to, task.data.attributes.message_from, task.data.sid, messageText)" onclick="return false" ><i class='fi fi-check'></i>Send</a></form>
        </template>
        </template>
        <template v-if="task.data.channel ==='voice'">
        <div class='small-6 columns'>
        <label>Mic Volume</label>
         <div class="volume-wrapper" id="mic-wrapper"></div>
         </div>
         <div class='small-6 columns'>
        <label>Speaker Volume</label>
         <div class="volume-wrapper" id="speaker-wrapper"></div>
         <br /> &nbsp;<br /> &nbsp;<br /> &nbsp;<br /> &nbsp;<br /> &nbsp;
         </div>
         <div class='message-dashboard'>
                <div class='small-2 columns'>
                  <div class='profilePic'>
                    <img v-bind:src="task.data.profile_pic" alt='profile' />
                  </div>
                </div> 
                <div class='small-10 columns'>
                  <div class='message-desc'>
                    <div class='messageName'>
                      <b>IVR Text</b>
                    </div>
                    {{task.data.attributes.asrtext}}
                  </div>
                </div>
              </div>

         </div>
        </template>
      </div>
    </template>

  <script src="js/vendor/jquery.js"></script>
  <script src="js/foundation.min.js"></script>
  <script src="js/foundation/foundation.util.motion.js"></script>
  <script src="js/foundation/foundation.util.mediaQuery.js"></script>
  <script src="js/menucustom.js" type="text/javascript"></script>
  <script>        $(document).foundation(); </script>
  <script src="https://www.gstatic.com/firebasejs/3.9.0/firebase.js"></script>


  <script type="text/javascript" src="//media.twiliocdn.com/taskrouter/js/v1.6/taskrouter.min.js"></script>
  <script type="text/javascript" src="https://assets.zendesk.com/apps/sdk/2.0/zaf_sdk.js"></script>
  <script src="js/VolumeIndicator.js" type="text/javascript"></script>
  <script src="js/al-twilio-helper-funcs.js" type="text/javascript"></script>
  <script src="https://unpkg.com/vue"></script>
  <script src="js/vueAgentComponents.js" type="text/javascript"></script>
  <script type="text/javascript" src="//media.twiliocdn.com/sdk/js/client/v1.4/twilio.min.js"></script>
  <script src="https://media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
  <script src="https://media.twiliocdn.com/sdk/js/chat/v1.1/twilio-chat.min.js"></script>
  <script type="text/javascript" src="https://media.twiliocdn.com/sdk/js/sync/v0.5/twilio-sync.min.js"></script>




  <script>
    function registerTaskRouterCallbacks() {
      worker.on('ready', function(worker) {
        console.log("Successfully registered as: " + worker.friendlyName);
        console.log("Current activity is: " + worker.activityName);
        console.log(worker.sid);             // 'WKxxx'
        console.log(worker.available);       // false
      });



      worker.on('activity.update', function(worker) {
      });

      worker.on("reservation.created", function(reservation) {
        console.log("new reservation") 
        console.log(reservation);
        console.log("---");
        //zendeskClient.invoke('notify','New Task For You!',alert);
        vueMaster.$refs.agentui.addTaskToList(reservation.task);
        
        /*zendeskClient.invoke('instances.create', {
          location: 'modal',
          url: 'https://twiliozendeskcc.herokuapp.com/reservationmodal?reservationSid='+reservation.sid+'&taskSid='+reservation.task.sid+'&channel='+reservation.task.taskChannelUniqueName
        }).then(function(modalContext) {
          window.modalClient = zendeskClient.instance(modalContext['instances.create'][0].instanceGuid);
          modalClient.on('modal.close', function() {
          });
        });*/
      });


      worker.on("reservation.accepted", function(reservation) {
        //zendeskClient.invoke('routeTo', 'ticket', 'new')
        try {
          modalClient.invoke('destroy');

        }
        catch (err) {}
      });

      worker.on("reservation.rejected", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " rejected!");
      });

      worker.on("reservation.timeout", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " timed out!");
      });

      worker.on("reservation.canceled", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " canceled!");
      });    
    }

    function registerClientCallbacks() {

      Twilio.Device.ready(function (device) {
        console.log('Twilio.Device Ready!');
      });

      Twilio.Device.error(function (error) {
        console.log('Twilio.Device Error: ' + error.message);
      });

      Twilio.Device.connect(function (conn) {
        console.log('Successfully established call!');
        window.micIndicator = new VolumeIndicator();
        document.getElementById('mic-wrapper').appendChild(micIndicator.element);

        window.speakerIndicator = new VolumeIndicator();
        document.getElementById('speaker-wrapper').appendChild(speakerIndicator.element);
        conn.on('volume', setVolumes);

      });

      Twilio.Device.disconnect(function (conn) {
        console.log('Call ended.');
        conn.removeListener('volume', setVolumes);
        setVolumes(0, 0);

      });

      Twilio.Device.incoming(function (conn) {
        console.log('Incoming connection from ' + conn.parameters.From);
          // accept the incoming connection and start two-way audio
        conn.accept();
        
      });

    }
    

    window.onload = function() {
        // We use jQuery to make an Ajax request to the server to retrieve our 
        // Access Token

        $.getJSON('/token', function(data) {
          //console.log(data.token);
          window.worker = new Twilio.TaskRouter.Worker(data.token);
          registerTaskRouterCallbacks();
          window.zendeskClient = ZAFClient.init();
          zendeskClient.invoke('resize', { width: '100%', height: '600px' });
        });
         $.getJSON('/twilioAccessToken', function(accessToken) {
           console.log('Access Token for Chat: ' + accessToken);
           window.chatClient = new Twilio.Chat.Client(accessToken);
        });
        $.getJSON('/clienttoken', function(data) {
          console.log('Got a token for client.');
          console.log('Token: ' + data.token);
          Twilio.Device.setup(data.token);

          registerClientCallbacks();

        });
      }

var config = {
    apiKey: "AIzaSyDjqMYOFKIVU2z7RkkhxbY9DoLCv82sD1Y",
    authDomain: "taskrouter.firebaseapp.com",
    databaseURL: "https://taskrouter.firebaseio.com",
    projectId: "firebase-taskrouter",
    storageBucket: "firebase-taskrouter.appspot.com",
    messagingSenderId: "132789793599"
  };
  firebase.initializeApp(config);

window.myFirebase = firebase.database().ref();


Vue.component('agentui', {
  template: '#Task',
  data: function() {
   return {
   taskList: [],
   messageText: "",
   messageList:{}

  }

},
methods: {
  add: function() {
    this.taskList[0].messageList.push({from:'meya', content:'15'});
  },
  accept: function(sid, reservationSid, channel) {
    console.log("calling accept method with sid " + sid + " and reservationSid " + reservationSid);
    acceptTask(sid, reservationSid, channel);
  },
  completeTask: function(sid) {
    console.log("Completing task " + sid);
    completeTask(sid);
  },
  removeTask: function() {
    this.taskList.pop();
  },
  update: function(newTaskList) {
    console.log("updating vue database");
    console.log("updating to " + newTaskList);
    this.taskList = newTaskList;
    console.log(JSON.stringify(this.taskList));
  },
  addTaskToList: function(task) {
    console.log("adding task to List")
    var currentTaskList = this.taskList;
    currentTaskList.push({"data":{"attributes":task.attributes, "channel":task.taskChannelUniqueName}});
    console.log("HERE")
    console.log(JSON.stringify(currentTaskList));

  },
  updateMessages: function(newMessageData) {
    console.log("Updating message data");
    console.log("Updating to " + JSON.stringify(newMessageData));
    this.messageList=newMessageData;
  },
  fetchMessagesForTask: function(taskSid) {
    console.log("Being asked for message data for task " + taskSid);
    var arr=[]
    console.log(this.messageList);
    var msgList = this.messageList;
    console.log(JSON.stringify(msgList));
    for (key in msgList[taskSid]) {
      arr.push(msgList[taskSid][key]);
    }
    console.log("Returning " + JSON.stringify(arr));
    return arr;
  },
  fetchHistoricalChatMessagesForTask: function(taskSid) {
        // fetch all historical messages on the Channel to display
        chatClient.getChannelByUniqueName(taskSid).then(fetchedChannel => {
            fetchedChannel.getMessages(30, direction='forward').then(messages => {
                messages.forEach(message => {
                    var messageBody = message.body;
                });
            });
        });
    },
  reset: function() {
    this.taskList = [];
    console.log("reset vue to zero");
    console.log(JSON.stringify(this.taskList));
  },
  sendMessage: function(from, to, sid, body) {
    console.log("trying to send message " + from + to + sid + body);
     sendSMS(from, to, sid, body);
     this.messageText="";
  }


}
})


window.vueMaster = new Vue({
  el: '#agentui'
  

})
/*
  [
  {
    "data": {
      "attributes": {
        "message_from": "+14152791216",
        "message_body": "Test",
        "from": "+14152791216",
        "message_to": "+18559798881",
        "bot_qualified": "true",
        "message_sid": "SM42bf83a98d370d391790fc01d07b4d7a"
      },
      "channel": "chat",
      "queue": "Other Customers",
      "reservationSid": "WR35cb1acedfb83549876e079be0a0966e",
      "sid": "WT9eacd27c8b111274d0ff1bd746030a99",
      "status": "reserved"
    }
  }
]
*/
//technically vuefire should do this but it doesn't seem to work reliably and is impossible to debug
myFirebase.child("taskList").child("WKc9fb44a68905d751dded01581d3fe50c").on('value', function(snapshot) {
  // This function does a bit of normalization on the app data we retrieve from firebase
  // the data is structured in JSON under task SID, but it's easier in vue to not need to know the task sid
  // so we replace it with "Data"
  // we also parse the JSON attributes which are escaped string into actual JSON
  console.log('task List structure changed');
  console.log(JSON.stringify(snapshot.val()));
  var taskListData = snapshot.val();
  var dataToReturn = [];
  if (taskListData != null){
    for (var key in taskListData) {
      var tempJson = {};
      tempJson["data"]=taskListData[key];
      console.log("wanting to parse task attributes:");
      console.log(tempJson["data"]["attributes"]);
      tempJson["data"]["attributes"]=JSON.parse(tempJson["data"]["attributes"]);

      dataToReturn.push(tempJson)
    }
      }
  console.log("THIS IS WHAT I NEED TO REPLICATE");
  console.log(dataToReturn);
  vueMaster.$refs.agentui.update(dataToReturn);
});

myFirebase.child("messageList").on('value', function(snapshot) {

  console.log('message structure changed');
  console.log(JSON.stringify(snapshot.val()));
  var messageListData = snapshot.val();
  var dataToReturn = {};
  if (messageListData != null){
    dataToReturn = messageListData;
  }

  vueMaster.$refs.agentui.updateMessages(dataToReturn);
});







</script>



</body>
</html>
