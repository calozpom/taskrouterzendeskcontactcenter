<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskRouter OmniChannel Contact Center</title>
  <link href='https://fonts.googleapis.com/css?family=Raleway:400,300,500' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="css/foundationz.css" />
  <link href="fonts/foundation-icons/foundation-icons.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" type="text/css" href="css/normalize.css" />
  <!--<link rel="stylesheet" type="text/css" href="fonts/foundation-icons">-->
  <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" />
  <link href="css/stylez.css" rel="stylesheet" />
  <script src="js/modernizr.custom.js"></script>
</head>
<body class="fadeIn animated">
  <div class="container">
    <div class="content-body">

      <div id="dashboard-body">
        <div class="row" id="addToThis"> 
          <div id="agentui">
            <agentui ref="agentui"></agentui>
          </div>       
        </div>
      </div>
    </div>
  </div>

  <template id="Task" >
    <div>
      <div class='small-12 columns' v-for="task in taskList" v-if="task.data.status === 'assigned' || task.data.status ==='wrapping' || task.data.status ==='reserved'">
        <div class='custom-panel-heading'>
          <h5 class='white'>
            <div id='titleText'>
            
              <img v-bind:src="task.data.profile_pic" height="50" width="50" align="right">
              
              Task: {{task.data.name}} 
              <br />
              Address: {{task.data.address}}
              <br />
              Status: {{task.data.status}}
              <br />
              Intent: {{task.data.attributes.bot_intent}}
              <br />
              TaskSid: {{task.sid}}
            </div>
            <template v-if="task.data.status === 'reserved'">
              <span class='label radius alert right'>Reject</span>&nbsp;
              <a href='#' @click="accept(task.data.sid, task.data.reservationSid, task.data.channel)">
                <span class='label radius success right'>Accept</span>
              </a>
            </template>
            <template v-if="task.data.status === 'assigned' || task.data.status ==='wrapping'">
            <a href='#' @Click="completeTask(task.data.sid)"><span class='label radius success right'>Complete</span></a>
            </template>
          </h5>
        </div>
        <div class='custom-panel-details'>
        <div v-if="task.data.channel ==='chat'">
          <!--DEBUG{{messageList}}-->
          <br />
          <div v-for="messagesForTask,key in messageList">
            <div v-for="message,key2 in messagesForTask">
            <!--DEBUG <br /> {{message}} <br />{{key}}<br />{{key2}}<br />{{task.sid}}<br />-->
            <div v-if="key === task.sid">
              <div class='row'>
                <div class='message-dashboard'>
                  <div class='small-2 columns'>
                    <div class='profilePic'>
                      <img v-bind:src="task.data.profile_pic" alt='profile' />
                    </div>
                  </div> 
                  <div class='small-10 columns'>
                    <div class='message-desc'>
                      <div class='messageName'>
                        <b>{{message.from}}</b>
                      </div>
                      {{message.message}}
                      <span class='right green'>{{message.timestamp}}</span>
                    </div>
                  </div>
                </div>
              </div>
          </div>
        </div>
      </div>
        <div v-if="task.data.accepted==='true'">
          <form><input type='text' v-model="messageText" @keyup.enter="sendMessage(task.data.attributes.message_to, task.data.attributes.message_from, task.data.sid, messageText); return false;" placeholder='Reply...'><a href='#' class='button success radius' @click="sendMessage(task.data.attributes.message_to, task.data.attributes.message_from, task.data.sid, messageText)" onclick="return false" ><i class='fi fi-check'></i>Send</a></form>
        </div>
        </div>
        <div v-if="task.data.channel ==='voice'">
        <div class='small-6 columns'>
        <label>Mic Volume</label>
         <div class="volume-wrapper" id="mic-wrapper"></div>
         </div>
         <div class='small-6 columns'>
        <label>Speaker Volume</label>
         <div class="volume-wrapper" id="speaker-wrapper"></div>
         <br /> &nbsp;<br /> &nbsp;<br /> &nbsp;<br /> &nbsp;<br /> &nbsp;
         </div>
         <div class='message-dashboard'>
                <div class='small-2 columns'>
                  <div class='profilePic'>
                    <img v-bind:src="task.data.profile_pic" alt='profile' />
                  </div>
                </div> 
                <div class='small-10 columns'>
                  <div class='message-desc'>
                    <div class='messageName'>
                      <b>IVR Text</b>
                    </div>
                    {{task.data.attributes.asrtext}}
                  </div>
                </div>
              </div>

         </div>
        </div>
      </div>
    </template>

  <script src="js/vendor/jquery.js"></script>
  <script src="js/foundation.min.js"></script>
  <script src="js/foundation/foundation.util.motion.js"></script>
  <script src="js/foundation/foundation.util.mediaQuery.js"></script>
  <script src="js/menucustom.js" type="text/javascript"></script>
  <script>        $(document).foundation(); </script>


  <script type="text/javascript" src="//media.twiliocdn.com/taskrouter/js/v1.6/taskrouter.min.js"></script>
  <script type="text/javascript" src="https://assets.zendesk.com/apps/sdk/2.0/zaf_sdk.js"></script>
  <script src="js/VolumeIndicator.js" type="text/javascript"></script>
  <script src="js/al-twilio-helper-funcs.js" type="text/javascript"></script>
  <script src="https://unpkg.com/vue"></script>
  <script src="js/vueAgentComponents.js" type="text/javascript"></script>
  <script type="text/javascript" src="//media.twiliocdn.com/sdk/js/client/v1.4/twilio.min.js"></script>
  <script src="https://media.twiliocdn.com/sdk/js/common/v0.1/twilio-common.min.js"></script>
  <script src="https://media.twiliocdn.com/sdk/js/chat/v1.1/twilio-chat.min.js"></script>
  <script type="text/javascript" src="https://media.twiliocdn.com/sdk/js/sync/v0.5/twilio-sync.min.js"></script>




  <script>
    function registerTaskRouterCallbacks() {
      worker.on('ready', function(worker) {
        console.log("Successfully registered as: " + worker.friendlyName);
        console.log("Current activity is: " + worker.activityName);
        console.log(worker.sid);             // 'WKxxx'
        console.log(worker.available);       // false
        
      });



      worker.on('activity.update', function(worker) {
      });

      worker.on("reservation.created", function(reservation) {
        console.log("new reservation") 
        console.log(reservation);
        console.log("---");
        
        

      });


      worker.on("reservation.accepted", function(reservation) {
        //zendeskClient.invoke('routeTo', 'ticket', 'new')
        try {
          modalClient.invoke('destroy');

        }
        catch (err) {}
      });

      worker.on("reservation.rejected", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " rejected!");
      });

      worker.on("reservation.timeout", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " timed out!");
      });

      worker.on("reservation.canceled", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " canceled!");
      });    

      
    }

    function registerClientCallbacks() {

      Twilio.Device.ready(function (device) {
        console.log('Twilio.Device Ready!');
      });

      Twilio.Device.error(function (error) {
        console.log('Twilio.Device Error: ' + error.message);
      });

      Twilio.Device.connect(function (conn) {
        console.log('Successfully established call!');
        window.micIndicator = new VolumeIndicator();
        document.getElementById('mic-wrapper').appendChild(micIndicator.element);

        window.speakerIndicator = new VolumeIndicator();
        document.getElementById('speaker-wrapper').appendChild(speakerIndicator.element);
        conn.on('volume', setVolumes);

      });

      Twilio.Device.disconnect(function (conn) {
        console.log('Call ended.');
        conn.removeListener('volume', setVolumes);
        setVolumes(0, 0);

      });

      Twilio.Device.incoming(function (conn) {
        console.log('Incoming connection from ' + conn.parameters.From);
          // accept the incoming connection and start two-way audio
        conn.accept();
        
      });

    }

    function setChatCallBack(chatIndex) {
      console.log("trying to get chat channel indexed as " + chatIndex)
      chatClient.getChannelByUniqueName(chatIndex).then(fetchedChannel => {
          console.log("got a chat channel ")
          fetchedChannel.join().then(channel => {
            console.log("joined channel")
          fetchedChannel.getMessages().then(messages => {
            console.log("got messages")
          //fetchedChannel.getMessages(30, 0, 'forward').then(messages => {
            console.log(messages);
            for (messageKey in messages.items) {
              console.log("got a message!")
              console.log(messages.items[messageKey].state.body)
              console.log(messages.items[messageKey].state.author)
              console.log(messages.items[messageKey].state.timestamp)
             vueMaster.$refs.agentui.addMessageToList(chatIndex, messages.items[messageKey].state.author,messages.items[messageKey].state.body, messages.items[messageKey].state.timestamp);


            }
             /* messages.forEach(message => {
                console.log("got a message!")
                console.log(message)
                console.log(message.body);
                var messageBody = message.body;
              });*/
            });
          channel.on('messageAdded', function(message) {
            console.log("hey a new message showed up in the chat channel ")
            console.log(message.body)
              console.log(message.author)
              console.log(message.timestamp)
             vueMaster.$refs.agentui.addMessageToList(chatIndex, message.author,message.body, message.timestamp);

          })
        });
        }); 
    }
    

    window.onload = function() {
        // We use jQuery to make an Ajax request to the server to retrieve our 
        // Access Token

        $.getJSON('/token', function(data) {
          //console.log(data.token);
          window.worker = new Twilio.TaskRouter.Worker(data.taskRouterToken);
          window.syncClient = new Twilio.Sync.Client(data.syncToken);
          Twilio.Device.setup(data.clientToken);
          Twilio.Chat.Client.create(data.chatToken).then(client => {
              window.chatClient = client;
              console.log("chat client is ready");
              registerSyncAndChatCallbacks();
              
          });
          registerTaskRouterCallbacks();
          registerClientCallbacks();
          //UNCOMMENT THIS FOR DEMO
          //window.zendeskClient = ZAFClient.init();
          //zendeskClient.invoke('resize', { width: '100%', height: '600px' });
        });
      }

function registerSyncAndChatCallbacks() {
  console.log("trying to subscribe to syncmap TaskList.WK3d909c13f46f8e227e32e38d66b19691")
  syncClient.map('TaskList.WK3d909c13f46f8e227e32e38d66b19691').then(map => {
                console.log("got the map");
                map.getItems().then(function(page) {
                    if (page.items.length) {
                        for (i in page.items) {
                           vueMaster.$refs.agentui.addTaskToList(page.items[i].key, page.items[i].value);
                           setChatCallBack(page.items[i].key)
                        }
                    }
                  });

                map.on('itemAdded', (newMapItem) => {
                    console.log('item added');
                    console.log(map.uniqueName);
                    console.log(newMapItem.key);
                    console.log(newMapItem.value);
                    if (newMapItem.value.channel == 'chat') {
                      setChatCallBack(newMapItem.key)
                    }
                    vueMaster.$refs.agentui.addTaskToList(newMapItem.key, newMapItem.value);
               });
               map.on('itemUpdated', (updatedMapItem) => {
                   console.log("updated map item " + updatedMapItem.key + JSON.stringify(updatedMapItem.value))
                   vueMaster.$refs.agentui.updateTaskInList(updatedMapItem.key, updatedMapItem.value);
               });
               map.on('itemRemoved', (removedMapItemKey) => {
                   console.log('removed key = ' + removedMapItemKey);
                   vueMaster.$refs.agentui.removeTaskFromList(removedMapItemKey);
               });
            });
}


Vue.component('agentui', {
  template: '#Task',
  data: function() {
   return {
   taskList: [],
   messageText: "",
   messageList:{}

  }

},
methods: {
  add: function() {
    this.taskList[0].messageList.push({from:'meya', content:'15'});
  },
  accept: function(sid, reservationSid, channel) {
    console.log("calling accept method with sid " + sid + " and reservationSid " + reservationSid);
    acceptTask(sid, reservationSid, channel);
  },
  completeTask: function(sid) {
    console.log("Completing task " + sid);
    completeTask(sid);
  },
  removeTask: function() {
    this.taskList.pop();
  },
  update: function(newTaskList) {
    console.log("updating vue database");
    console.log("updating to " + newTaskList);
    this.taskList = newTaskList;
    console.log(JSON.stringify(this.taskList));
  },
  /*addTaskToList: function(taskData) {
    console.log("adding task to List")
    console.log(JSON.stringify(taskData));
    var currentTaskList = this.taskList;
    currentTaskList.push(taskData);
    console.log("HERE")
    console.log(JSON.stringify(currentTaskList));

  },*/
  addTaskToList: function(sid, taskData) {
    console.log("adding task to list");
    console.log(sid);
    //console.log(taskData);
    taskData.attributes = JSON.parse(taskData.attributes)
    var dataToSet={"sid":taskData.sid,"data":taskData}
    //console.log(dataToSet)
    //{"attributes":taskData.attributes, "queue":taskData.queue,"sid":taskData.sid, "status":taskData.status, "channel":taskData.channel}};
    var currentTaskList = this.taskList
    currentTaskList.push(dataToSet);
    this.taskList={}
    this.taskList = currentTaskList;
    console.log(this.taskList)
  },
  updateTaskInList: function(sid, taskData) {
    console.log("updating task in list");
    console.log(sid);
    taskData.attributes = JSON.parse(taskData.attributes)
    //console.log(taskData);
    var currentTaskList = this.taskList
    for (key in currentTaskList) {
      if (currentTaskList[key]["sid"]==sid) {
            //var dataToSet={"sid":taskData.sid,"data":{"attributes":taskData.attributes, "queue":taskData.queue,"sid":taskData.sid, "status":taskData.status, "channel":taskData.channel}};
            currentTaskList[key] = {"sid":taskData.sid,"data":taskData};

      }
    }
    //console.log(currentTaskList)
    this.taskList = {};
    this.taskList = currentTaskList
    console.log(this.taskList)

  },
  removeTaskFromList: function(sid, taskData) {
    console.log("removing task from list");
    console.log(sid);
    console.log(taskData);
    var currentTaskList = this.taskList
    for (key in currentTaskList) {
      if (currentTaskList[key]["sid"]==sid) {
            currentTaskList.splice(key, 1);

      }
    }
    this.taskList = {}
    this.taskList = currentTaskList


  },
  addMessageToList: function(taskSid, author, message,timestamp) {
    console.log("Adding message to vue state");
    var currentMessageList = this.messageList;
    if (currentMessageList[taskSid]) {
      currentMessageList[taskSid].push({"from":author,"message":message, "timestamp":timestamp})
    }
    else {
      currentMessageList[taskSid] = [{"from":author,"message":message, "timestamp":timestamp}]
    }
    //console.log("new message list is " + JSON.stringify(currentMessageList))
    this.MessageList = currentMessageList;
    // for some reason i don't understand, you need to toggle tasklist to get vue to wake up and re-render
    // toggling messagelist doesn't do it.
    var tempTaskList = this.taskList;
    this.taskList={}
    this.taskList=tempTaskList

  }, 
  updateMessages: function(newMessageData) {
    console.log("Updating message data");
    console.log("Updating to " + JSON.stringify(newMessageData));
    this.messageList=newMessageData;
  },
  reset: function() {
    this.taskList = [];
    console.log("reset vue to zero");
    console.log(JSON.stringify(this.taskList));
  },
  sendMessage: function(from, to, sid, body) {
    console.log("trying to send message " + from + to + sid + body);
     sendSMS(from, to, sid, body);
     this.messageText="";
  }


}
})


window.vueMaster = new Vue({
  el: '#agentui'
  

})



</script>



</body>
</html>
