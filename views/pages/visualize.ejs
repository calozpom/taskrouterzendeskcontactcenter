
<!DOCTYPE html>
<!--[if IE 9]><html class="lt-ie10" lang="en" > <![endif]-->
<html class="no-js" lang="en">
<head>
<meta charset="utf-8">
 
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Visualize TaskRouter Workspace</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.3/css/normalize.min.css">
<!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.3/css/foundation.min.css">-->
<link rel="stylesheet" href="css/foundation.css">
<link href='http://cdnjs.cloudflare.com/ajax/libs/foundicons/3.0.0/foundation-icons.css' rel='stylesheet' type='text/css'>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/motion-ui/1.1.1/motion-ui.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script>
</head>
<body>
 
<nav class="top-bar" data-topbar>
<ul class="title-area">
 
<li class="name">
<h1>
<a href="#">
Visualize Workspace
</a>
</h1>
</li>
<li class="toggle-topbar menu-icon"><a href="#"><span>Menu</span></a></li>
</ul>
<section class="top-bar-section">
 
<ul class="left">
<li class="divider"></li>
<li class="has-dropdown">
<a class="active" href="#">Links</a>
<ul class="dropdown">
<li><a href="#" onclick="showContact()">Show Contact</a></li>
</ul>
</li>
<li class="divider"></li>

</ul>
 
<ul class="right">
<li class="divider"></li>

<li class="divider"></li>
<li><a href="#" onclick="sendDetails()">Send Details</a></li>
<li class="divider"></li>
</ul>
</section>
</nav>
 <div class="row" id="spacer" ><div>&nbsp;<br /></div></div>
 
<div class="row" id="visualizer" data-equalizer>
    <visualizer ref="visualizer"></visualizer>
</div> 
<template id="TaskQueues" >
   <div>
      <div class='small-4 columns data-equalizer-watch dynamicColumn' v-for="queue in queueList">
        <div class='box'>
            <div class='box-icon'><img src='img/taskrouter-icon_wb.png'></div>
            <div class='info'>
                <h4 class='text-center'>{{queue.name}}</h4>

                     <div v-for="queueDetail,key in taskList">
                         <div v-if="key===queue.sid">
                            <br />
                            <div v-for="task,key in queueDetail">
                                <div class='header panel' :key=key>
                                    <div class='sign'>
                                        <h1>{{key}}</h1>
                                    </div>
                                    <p>
                                        <span class='text-center'>{{task.data.status}}</span>
                                        <br />
                                        {{task.data.attributes}}
                                        <br />
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                <br />
            </div>
        </div>
      </div>
  </div>
</template>

</div>
 
 
<footer class="row">
<div class="large-12 columns">
<hr/>
<div class="row">
<div class="large-6 columns">
<p>&copy; Al Cook | @calozpom | Twilio</p>
</div>
</div>
</div>
</footer>
<script src="https://code.jquery.com/jquery-2.1.4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/foundation/5.5.3/js/foundation.min.js"></script>
<script src="js/foundation/foundation.core.js"></script>
<script src="js/foundation/foundation.util.motion.js"></script>
<script src="js/foundation/foundation.util.mediaQuery.js"></script>
<script src="https://unpkg.com/vue"></script>
<script type="text/javascript" src="//media.twiliocdn.com/taskrouter/js/v1.4/taskrouter.min.js"></script>
<script type="text/javascript" src="https://media.twiliocdn.com/sdk/js/sync/v0.5/twilio-sync.min.js"></script>


<script>
      $(document).foundation();
    </script>
<script>
window.onload = function() {
     // We use jQuery to make an Ajax request to the server to retrieve our 
        // Access Token
    $.getJSON('/workspaceToken', function(data) {
        //window.worker = new Twilio.TaskRouter.Worker(data.workerToken);
        window.workspace = new Twilio.TaskRouter.Workspace(data.workspaceToken);
        window.syncClient = new Twilio.Sync.Client(data.syncToken);
        window.taskrouterGlobals = {};
        registerTaskRouterCallbacks();
    }); 
}

Vue.component('visualizer', {
  template: '#TaskQueues',
  data: function() {
   return {
   queueList: [],
   messageText: "",
   taskList: {}
  }

},
methods: {
  addQueue: function(queuedata) {
    this.queueList.push(queuedata);
    console.log("updated queue structure. now: " + JSON.stringify(this.queueList));
    //this.$set(this.taskList, queuedata.sid, {})
    console.log(this.taskList);

    // We dynamically set the column widths based on number of queues
    console.log("trying to change width")
    var divColumnClass = "small-"+Math.max(Math.floor(12/this.queueList.length),1)+" columns data-equalizer-watch dynamicColumn";
    // We need to wait for Vue to re-render with the new queueList data before we can access the divs:
    Vue.nextTick(function () {
      
        $('.dynamicColumn').each(function(i) {
            console.log("changing width")
            $(this).attr('class',divColumnClass);
        });
    })
  },
  addTaskToQueue: function(queueSid, taskSid, taskData) {
    // Creates the JSON representation of current state
    // Looks like this
    // {"WQea20678d853cf025b5875126f5c1547a":{"WTc27d7877778874faf8f71ddb52964261":{"data":{"attributes":"{}","sid":"WTc27d7877778874faf8f71ddb52964261","status":"pending","channel":"default","queue":"Waiting for Bot"}}}}
    console.log("adding task to queue " +queueSid);
    //https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats
    if (this.taskList[queueSid])
    {
        // for some reason if you just update this.taskList directly without resetting it to {} first, Vue does not update
        // Probably a me problem, but not sure what. free pony to someone who tells me why. 
        var currentTaskList = this.taskList;
        currentTaskList[queueSid][taskSid] = {"data":taskData};
        //this.$set(this.taskList.queueSid, taskSid, {"data":taskData})
        this.taskList ={};
        this.taskList = currentTaskList;
        //var currentTaskList = this.taskList;

        //currentTaskList[queueSid][taskSid] = {"data":taskData};

        //this.taskList=currentTaskList;
        console.log(JSON.stringify(this.taskList));

        //this.taskList[queueSid][taskSid] = {"data":taskData};
        //this.$set(this.taskList[queueSid], taskSid, {"data":taskData})
    }
    else
    {
        var currentTaskList =this.taskList;
        currentTaskList[queueSid] = {[taskSid] : {"data":taskData}}
        //this.$set(this.taskList, queueSid, {[taskSid] : {"data":taskData}})
        this.taskList ={};
        this.taskList=currentTaskList;
        console.log(JSON.stringify(this.taskList));



    }

  },
  updateTaskInQueue: function(queueSid, taskSid, taskData) {
    console.log("updating task in queue " +queueSid);
    //this.$set(this.taskList, queueSid.taskSid, {"data":taskData})
    var currentTaskList = this.taskList;

    currentTaskList[queueSid][taskSid] = {"data":taskData};
    //this.$set(this.taskList, queueSid, currentTaskList)
    this.taskList ={};
    this.taskList = currentTaskList;
  },
  removeTaskFromQueue: function(queueSid, taskSid) {
    var currentTaskList = this.taskList;
    delete currentTaskList[queueSid][taskSid];
    this.taskList ={};
    this.taskList = currentTaskList;
    //this.$set(this.taskList, queueSid, currentTaskList)
  },
  reset: function() {
    this.taskList = {};
    console.log("reset vue to zero");
    console.log(JSON.stringify(this.taskList));
  },
  listData: function() {
    console.log(JSON.stringify(this.taskList));
  }
}
})


window.vueMaster = new Vue({
  el: '#visualizer'
  

})


function registerTaskRouterCallbacks() {
    workspace.on("ready", function(workspace) {
        console.log(workspace.sid)             // 'WKxxx'
        console.log(workspace.friendlyName)    // 'Worker 1'

    buildTaskRouterGrid();
    });
}

function sendDetails() {
console.log("sending details")
}

function showContact() {
  console.log("showing contact info")
}

function buildTaskRouterGrid() {
    console.log("\n\nbuilding taskrouter grid");
    workspace.taskqueues.fetch(function(error, taskQueueList) {
        console.log('printing task queues');
        console.log(taskQueueList);
        if (error) {
            console.log("Error fetching TaskQueues for Workspace.");
            console.log(error.code);
            console.log(error.message);
            return;
        }
        console.log("Parsing response");
        var data = taskQueueList.data;

        console.log("going to loop " + data.length + " times");
        for (i=0; i < data.length; i++) {
            console.log(data[i]);
            console.log(data[i].friendlyName);
            vueMaster.$refs.visualizer.addQueue({"sid":data[i].sid,"name":data[i].friendlyName});
            console.log("setting callback for eventstream."+ data[i].sid)
            syncClient.map('EventStream.' + data[i].sid).then(map => {
                map.getItems().then(function(page) {
                    if (page.items.length) {
                        for (i in page.items) {
                           vueMaster.$refs.visualizer.addTaskToQueue(map.uniqueName.split(".")[1], page.items[i].key, page.items[i].value);
                        }
                    }
                  });

                map.on('itemAdded', (newMapItem) => {
                    console.log('item added');
                    console.log(map.uniqueName);
                    console.log(newMapItem.key);
                    console.log(newMapItem.value);
                    vueMaster.$refs.visualizer.addTaskToQueue(map.uniqueName.split(".")[1], newMapItem.key, newMapItem.value);
               });
               map.on('itemUpdated', (updatedMapItem) => {
                   console.log("updated map item " + updatedMapItem.key + JSON.stringify(updatedMapItem.value))
                   vueMaster.$refs.visualizer.updateTaskInQueue(map.uniqueName.split(".")[1], updatedMapItem.key, updatedMapItem.value);                               //updateTasks2(updatedMapItem.key, updatedMapItem.value);
               });
               map.on('itemRemoved', (removedMapItemKey) => {
                   console.log('removed key = ' + removedMapItemKey);
                   vueMaster.$refs.visualizer.removeTaskFromQueue(map.uniqueName.split(".")[1], removedMapItemKey);
               });
            });
        }
    });
}



</script>
</body>
</html>
